// Code generated by go-swagger; DO NOT EDIT.

package subscription

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SubscribeMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var SubscribeMaxParseMemory int64 = 32 << 20

// NewSubscribeParams creates a new SubscribeParams object
//
// There are no default values defined in the spec.
func NewSubscribeParams() SubscribeParams {

	return SubscribeParams{}
}

// SubscribeParams contains all the bound params for the subscribe operation
// typically these are obtained from a http.Request
//
// swagger:parameters subscribe
type SubscribeParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*City for weather updates
	  Required: true
	  In: formData
	*/
	City string
	/*Email address to subscribe
	  Required: true
	  In: formData
	*/
	Email string
	/*Frequency of updates (hourly or daily)
	  Required: true
	  In: formData
	*/
	Frequency string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewSubscribeParams() beforehand.
func (o *SubscribeParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(SubscribeMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdCity, fdhkCity, _ := fds.GetOK("city")
	if err := o.bindCity(fdCity, fdhkCity, route.Formats); err != nil {
		res = append(res, err)
	}

	fdEmail, fdhkEmail, _ := fds.GetOK("email")
	if err := o.bindEmail(fdEmail, fdhkEmail, route.Formats); err != nil {
		res = append(res, err)
	}

	fdFrequency, fdhkFrequency, _ := fds.GetOK("frequency")
	if err := o.bindFrequency(fdFrequency, fdhkFrequency, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCity binds and validates parameter City from formData.
func (o *SubscribeParams) bindCity(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("city", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("city", "formData", raw); err != nil {
		return err
	}
	o.City = raw

	return nil
}

// bindEmail binds and validates parameter Email from formData.
func (o *SubscribeParams) bindEmail(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("email", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("email", "formData", raw); err != nil {
		return err
	}
	o.Email = raw

	return nil
}

// bindFrequency binds and validates parameter Frequency from formData.
func (o *SubscribeParams) bindFrequency(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("frequency", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("frequency", "formData", raw); err != nil {
		return err
	}
	o.Frequency = raw

	if err := o.validateFrequency(formats); err != nil {
		return err
	}

	return nil
}

// validateFrequency carries on validations for parameter Frequency
func (o *SubscribeParams) validateFrequency(formats strfmt.Registry) error {

	if err := validate.EnumCase("frequency", "formData", o.Frequency, []interface{}{"hourly", "daily"}, true); err != nil {
		return err
	}

	return nil
}
