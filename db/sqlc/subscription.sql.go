// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: subscription.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const confirmSubscription = `-- name: ConfirmSubscription :exec
UPDATE subscriptions SET confirmed = true
WHERE token = $1
`

func (q *Queries) ConfirmSubscription(ctx context.Context, token uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, confirmSubscription, token)
	return err
}

const deleteSubscription = `-- name: DeleteSubscription :exec
DELETE FROM subscriptions
WHERE email = $1 AND token = $2
`

type DeleteSubscriptionParams struct {
	Email string    `json:"email"`
	Token uuid.UUID `json:"token"`
}

func (q *Queries) DeleteSubscription(ctx context.Context, arg DeleteSubscriptionParams) error {
	_, err := q.db.ExecContext(ctx, deleteSubscription, arg.Email, arg.Token)
	return err
}

const insertSubscription = `-- name: InsertSubscription :one
INSERT INTO subscriptions (email, city, frequency, token)
VALUES ($1, $2, $3, uuid_generate_v4())
RETURNING id, email, city, frequency, token, confirmed
`

type InsertSubscriptionParams struct {
	Email     string        `json:"email"`
	City      string        `json:"city"`
	Frequency FrequencyEnum `json:"frequency"`
}

func (q *Queries) InsertSubscription(ctx context.Context, arg InsertSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, insertSubscription, arg.Email, arg.City, arg.Frequency)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.City,
		&i.Frequency,
		&i.Token,
		&i.Confirmed,
	)
	return i, err
}

const listSubscription = `-- name: ListSubscription :one
SELECT count(*) as registered
FROM subscriptions
WHERE email = $1
`

func (q *Queries) ListSubscription(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRowContext(ctx, listSubscription, email)
	var registered int64
	err := row.Scan(&registered)
	return registered, err
}
