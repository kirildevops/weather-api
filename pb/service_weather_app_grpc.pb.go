// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: service_weather_app.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WeatherApp_GetWeather_FullMethodName         = "/pb.WeatherApp/GetWeather"
	WeatherApp_CreateSubscription_FullMethodName = "/pb.WeatherApp/CreateSubscription"
)

// WeatherAppClient is the client API for WeatherApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeatherAppClient interface {
	GetWeather(ctx context.Context, in *GetWeatherRequest, opts ...grpc.CallOption) (*GetWeatherResponse, error)
	CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*CreateSubscriptionResponse, error)
}

type weatherAppClient struct {
	cc grpc.ClientConnInterface
}

func NewWeatherAppClient(cc grpc.ClientConnInterface) WeatherAppClient {
	return &weatherAppClient{cc}
}

func (c *weatherAppClient) GetWeather(ctx context.Context, in *GetWeatherRequest, opts ...grpc.CallOption) (*GetWeatherResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWeatherResponse)
	err := c.cc.Invoke(ctx, WeatherApp_GetWeather_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherAppClient) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*CreateSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSubscriptionResponse)
	err := c.cc.Invoke(ctx, WeatherApp_CreateSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeatherAppServer is the server API for WeatherApp service.
// All implementations must embed UnimplementedWeatherAppServer
// for forward compatibility.
type WeatherAppServer interface {
	GetWeather(context.Context, *GetWeatherRequest) (*GetWeatherResponse, error)
	CreateSubscription(context.Context, *CreateSubscriptionRequest) (*CreateSubscriptionResponse, error)
	mustEmbedUnimplementedWeatherAppServer()
}

// UnimplementedWeatherAppServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWeatherAppServer struct{}

func (UnimplementedWeatherAppServer) GetWeather(context.Context, *GetWeatherRequest) (*GetWeatherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeather not implemented")
}
func (UnimplementedWeatherAppServer) CreateSubscription(context.Context, *CreateSubscriptionRequest) (*CreateSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscription not implemented")
}
func (UnimplementedWeatherAppServer) mustEmbedUnimplementedWeatherAppServer() {}
func (UnimplementedWeatherAppServer) testEmbeddedByValue()                    {}

// UnsafeWeatherAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeatherAppServer will
// result in compilation errors.
type UnsafeWeatherAppServer interface {
	mustEmbedUnimplementedWeatherAppServer()
}

func RegisterWeatherAppServer(s grpc.ServiceRegistrar, srv WeatherAppServer) {
	// If the following call pancis, it indicates UnimplementedWeatherAppServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WeatherApp_ServiceDesc, srv)
}

func _WeatherApp_GetWeather_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeatherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherAppServer).GetWeather(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeatherApp_GetWeather_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherAppServer).GetWeather(ctx, req.(*GetWeatherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeatherApp_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherAppServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeatherApp_CreateSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherAppServer).CreateSubscription(ctx, req.(*CreateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WeatherApp_ServiceDesc is the grpc.ServiceDesc for WeatherApp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WeatherApp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.WeatherApp",
	HandlerType: (*WeatherAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWeather",
			Handler:    _WeatherApp_GetWeather_Handler,
		},
		{
			MethodName: "CreateSubscription",
			Handler:    _WeatherApp_CreateSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_weather_app.proto",
}
